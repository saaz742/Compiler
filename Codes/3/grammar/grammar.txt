Program -> Declaration-list
Declaration-list -> Declaration Declaration-list | EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier ID #p_id
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime -> #declare_var ;  | [ NUM #p_num #declare_array ]  ;
Fun-declaration-prime -> #declaring_function #scope_enter ( Params ) #signature_declared Compound-stmt #default_return #function_declared #scope_exit
Type-specifier -> int | void
Params -> int ID #p_id Param-prime Param-list | void
Param-list -> , Param Param-list | EPSILON
Param -> Declaration-initial Param-prime
Param-prime -> [ #declare_array_param ]  | EPSILON #declare_int_param
Compound-stmt -> { #scope_enter Declaration-list Statement-list #scope_exit }
Statement-list -> Statement Statement-list | EPSILON 
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression ; #exp_end | break #break ; | ;
Selection-stmt -> if ( Expression ) #save Statement #jpf_save Else-stmt
Else-stmt -> endif | else Statement #jp endif 
Iteration-stmt -> for ( Expression ; #loop_start #save Expression ; #jpf_save Expression  )  Statement #jp_break #loop_end
Return-stmt -> return Return-stmt-prime 
Return-stmt-prime -> #return_void ; | Expression #return_int ;
Expression -> Simple-expression-zegond | ID #p_id B
B -> = Expression #assign | [ Expression #array_index ] H | Simple-expression-prime
H -> = Expression #assign | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #comp | EPSILON
Relop -> < #lt | == #eq
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term D | EPSILON
Addop -> + #add | - #sub
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> * #mult Signed-factor G  | EPSILON
Signed-factor -> + #add Factor  | - #sub Factor | Factor  
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + #add Factor | - #sub Factor | Factor-zegond
Factor -> ( Expression ) #arithmetic | ID #p_id  #arithmetic Var-call-prime | NUM #p_num  #arithmetic
Var-call-prime -> #push_state ( #start_arg Args #end_arg ) #call #pop_state | Var-prime
Var-prime -> [ Expression #array_index ] | EPSILON
Factor-prime -> #push_state ( #start_arg Args #end_arg ) #call #pop_state | EPSILON
Factor-zegond -> ( Expression ) | NUM #p_num
Args -> Arg-list | EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , #arg Expression  Arg-list-prime | EPSILON
